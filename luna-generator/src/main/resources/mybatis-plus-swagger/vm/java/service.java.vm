package ${packageName}.service;

import java.util.List;
#foreach ($column in $columns)
#if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
import com.luna.common.utils.DateUtils;
    #break
#end
#end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.ArrayList;
import com.github.pagehelper.PageInfo;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.metadata.OrderItem;
import org.apache.commons.compress.utils.Lists;
import org.apache.commons.collections4.CollectionUtils;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.baomidou.mybatisplus.core.metadata.IPage;
#if($table.sub)
import java.util.ArrayList;

import com.luna.common.utils.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.domain.${subClassName};
#end
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import ${packageName}.domain.vo.${ClassName}VO;
import ${packageName}.utils.DO2VOUtils;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}Service extends ServiceImpl<${ClassName}Mapper, ${ClassName}> {
    @Autowired
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
    public ${ClassName} select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField});
    }

    /**
     * 查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    public PageInfo select${ClassName}List(${ClassName} ${className}) {
        List<${ClassName}> list = ${className}Mapper.select${ClassName}List(${className});
        PageInfo pageInfo = new PageInfo<>(list);
        List<${ClassName}VO> resultList = convertList(list);
        pageInfo.setList(resultList);
        return pageInfo;
    }


    /**
     * 查询全部${functionName}列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    public List<${ClassName}VO> selectAllList(${ClassName} ${className}) {

        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<${ClassName}>(${className});
        ArrayList<${ClassName}VO> list = Lists.newArrayList();
        Page<${ClassName}> of = Page.of(0, 2000);
        while (true) {
            Page<${ClassName}> ${className}Page = ${className}Mapper.selectPage(of, queryWrapper);
            List<${ClassName}VO> resultList = convertList(${className}Page.getRecords());
            if (CollectionUtils.isEmpty(resultList)) {
                break;
            }
            of.setCurrent(of.getCurrent() + 1);
            list.addAll(resultList);
        }

        return list;
    }

    /**
    * ids查询品牌列表
    *
     * @param ids ${functionName}
     * @return ${functionName}
    */
    public List<${ClassName}> select${ClassName}ByIds(List<Long> ids){
        if (CollectionUtils.isEmpty(ids)){
            return new ArrayList<>();
        }
        return ${className}Mapper.selectBatchIds(ids);
    }

    /**
     * 分页查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @param page 分页参数
     * @return ${functionName}
     */
    public IPage<${ClassName}> selectList(IPage<${ClassName}> page, ${ClassName} ${className}) {
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<${ClassName}>(${className});
        for (OrderItem order : page.orders()) {
            queryWrapper.orderBy(true, order.isAsc(), order.getColumn());
        }
        Page<${ClassName}> selectPage = Page.of(page.getCurrent(), page.getSize());
        selectPage.setMaxLimit(page.maxLimit());
        return ${className}Mapper.selectPage(selectPage, queryWrapper);
    }

    /**
     * 分页查询${functionName}VO视图列表
     *
     * @param ${className} ${functionName}
     * @param page 分页参数
     * @return ${functionName}
     */
    public IPage<${ClassName}VO> selectVOList(IPage<${ClassName}> page, ${ClassName} ${className}) {
        IPage<${ClassName}> ${className}Page = selectList(page, ${className});
        List<${ClassName}> records = ${className}Page.getRecords();

        List<${ClassName}VO> list = convertList(records);

        Page<${ClassName}VO> result = new Page<>(${className}Page.getCurrent(), ${className}Page.getSize(), ${className}Page.getTotal());
        result.setRecords(list);
        return result;
    }

    /**
    * 构造数据
    * @param records
    * @return
    */
    public List<${ClassName}VO> convertList(List<${ClassName}> records) {
        List<${ClassName}VO> list = new ArrayList<>();
        if (CollectionUtils.isEmpty(records)) {
            return list;
        }
        for (${ClassName} record:records) {
            ${ClassName}VO ${className}VO = DO2VOUtils .${className}2${ClassName}VO(record);
            list.add(${className}VO);
        }
        return list;
    }


    /**
     * 新增${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
        #if($table.sub)
        @Transactional
        #end
    public int insert${ClassName}(${ClassName} ${className}) {
        #foreach ($column in $columns)
            #if($column.javaField == 'createTime')
                ${className}.setCreateTime(DateUtils.getNowDate());
            #end
        #end
        #if($table.sub)
            int rows = ${className}Mapper.insert${ClassName}(${className});
            insert${subClassName}(${className});
            return rows;
        #else
            return ${className}Mapper.insert${ClassName}(${className});
        #end
    }

    /**
     * 修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
        #if($table.sub)
        @Transactional
        #end
    public int update${ClassName}(${ClassName} ${className}) {
        #foreach ($column in $columns)
            #if($column.javaField == 'updateTime')
                ${className}.setUpdateTime(DateUtils.getNowDate());
            #end
        #end
        #if($table.sub)
                ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${className}.get${pkColumn.capJavaField}());
            insert${subClassName}(${className});
        #end
        return ${className}Mapper.update${ClassName}(${className});
    }

    /**
     * 批量修改${functionName}列表
     *
     * @param ${className}List ${functionName}列表
     * @return 结果
     */
    public Boolean update${className}Batch(List<${ClassName}> ${className}List) {
        if (CollectionUtils.isEmpty(${className}List)){
            return true;
        }
        return updateBatchById(${className}List);
    }

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键
     * @return 结果
     */
        #if($table.sub)
        @Transactional
        #end
    public int delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        #if($table.sub)
                ${className}Mapper.delete${subClassName}By${subTableFkClassName}s(${pkColumn.javaField}s);
        #end
        return ${className}Mapper.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s);
    }

    /**
     * 批量逻辑删除${functionName}
     *
     * @param ${className}Ids ${functionName}
     * @return 结果
     */
    public int deleteIds(List<${pkColumn.javaType}> ${className}Ids) {
        if (CollectionUtils.isEmpty(${className}Ids)) {
            return 0;
        }
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<${ClassName}>();
        queryWrapper.in("${pkColumn.javaField}", ${className}Ids);
        return ${className}Mapper.delete(queryWrapper);
    }


    /**
     * 逻辑删除${functionName}信息
     *
     * @param ${className} ${className} 主键
     * @return 结果
     */
        #if($table.sub)
        @Transactional
        #end
    public int delete(${ClassName} ${className}) {
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<${ClassName}>(${className});
        #if($table.sub)
                ${className}Mapper.delete(queryWrapper);
        #end
        return ${className}Mapper.delete(queryWrapper);
    }
    #if($table.sub)

        /**
         * 新增${subTable.functionName}信息
         *
         * @param ${className} ${functionName}对象
         */
        public void insert${subClassName}(${ClassName} ${className}) {
            List<${subClassName}> ${subclassName}List = ${className}.get${subClassName}List();
            ${pkColumn.javaType} ${pkColumn.javaField} = ${className}.get${pkColumn.capJavaField}();
            if (StringUtils.isNotNull(${subclassName}List)) {
                List<${subClassName}> list = new ArrayList<${subClassName}>();
                for (${subClassName} ${subclassName} :${subclassName}List)
                {
                    ${subclassName}.set${subTableFkClassName}(${pkColumn.javaField});
                    list.add(${subclassName});
                }
                if (list.size() > 0) {
                        ${className}Mapper.batch${subClassName}(list);
                }
            }
        }
    #end
}
